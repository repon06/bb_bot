from datetime import datetime
import re


def parse_trade_signal(signal_text):
    """
    –ü–∞—Ä—Å–∏—Ç —Å–∏–≥–Ω–∞–ª –æ —Ç–æ—Ä–≥–æ–≤–ª–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    signal_text -- —Å—Ç—Ä–æ–∫–∞ —Å —Å–∏–≥–Ω–∞–ª–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        ‚ö°‚ö°New Signal #SYMBOL-PAIR –∏–ª–∏ #SYMBOLPAIR
        üåê Exchange: #Exchange Spot
        Buy:  0.4900000
        TP1:  0.4953900
        TP2:  0.5002900
        TP3:  0.5051900
        TP4:  0.5100900
        TP5:  0.5149900
        STL:  0.4650100

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    dict -- —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
        {
            'symbol': 'SYMBOL/PAIR',
            'buy_price': 0.4900000,
            'take_profits': [0.4953900, 0.5002900, 0.5051900, 0.5100900, 0.5149900],
            'stop_loss': 0.4650100
        }
    """
    try:
        # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç—ã —Å –¥–µ—Ñ–∏—Å–æ–º, —Ç–∞–∫ –∏ –±–µ–∑)
        symbol_match = re.search(r'#([\w-]+)', signal_text)
        if not symbol_match:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∏–º–≤–æ–ª –≤ —Å–∏–≥–Ω–∞–ª–µ.")

        raw_symbol = symbol_match.group(1)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ "-"
        symbol = raw_symbol.replace('-', '')

        # –ò—â–µ–º —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏
        buy_match = re.search(r'Buy:\s+([\d.]+)', signal_text)
        if not buy_match:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏.")

        buy_price = float(buy_match.group(1))

        # –ò—â–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
        take_profits = []
        for i in range(1, 6):  # TP1, TP2, ..., TP5
            tp_match = re.search(f'TP{i}:\s+([\d.]+)', signal_text)
            if tp_match:
                take_profits.append(float(tp_match.group(1)))

        # –ò—â–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
        sl_match = re.search(r'STL:\s+([\d.]+)', signal_text)
        if not sl_match:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å.")

        stop_loss = float(sl_match.group(1))

        return {
            'symbol': symbol,
            'buy_price': buy_price,
            'take_profits': take_profits,
            'stop_loss': stop_loss,
            'date': datetime.now().date()
        }

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        return None


def parse_trade_signals(signals_text):
    """
    –ü–∞—Ä—Å–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    signals_text -- —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª–æ–≤.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    list -- —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏.
    """
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "‚ö°‚ö°New Signal"
    signals = re.split(r'(?=‚ö°‚ö°New Signal)', signals_text.strip())

    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø–æ—è–≤–∏—Ç—å—Å—è –∏–∑-–∑–∞ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
    signals = [signal.strip() for signal in signals if signal.strip()]

    parsed_signals = []
    for signal_text in signals:
        try:
            parsed_signal = parse_trade_signal(signal_text)
            if parsed_signal:
                parsed_signals.append(parsed_signal)
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    return parsed_signals
