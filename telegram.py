import asyncio
import logging
import os
import re

from telethon import TelegramClient
from telethon.errors import ChannelPrivateError, UsernameInvalidError
from telethon.tl.types import PeerChannel

from config import session_name, tg_api_id, tg_api_hash, tg_channel_name, session_insider_account, \
    LOGGING, tg_channel_insider_id

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log", mode="a", encoding="utf-8"),
        logging.StreamHandler()
    ])

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∏–≥–Ω–∞–ª–æ–º
# signal_pattern = r"‚ö°.*?New Signal\s#([\w-]+)\s+.*\n\s*`?\s*Buy:\s*`?\s*([\d.]+)\s*\n\s*`?\s*TP1:\s*`?\s*([\d.]+)\s*\n\s*`?\s*TP2:\s*`?\s*([\d.]+)\s*\n\s*`?\s*TP3:\s*`?\s*([\d.]+)\s*\n\s*`?\s*TP4:\s*`?\s*([\d.]+)\s*\n\s*`?\s*TP5:\s*`?\s*([\d.]+)\s*\n\s*`?\s*STL:\s*`?\s*([\d.]+)"
# TODO: –ø–æ–º–µ–Ω—è–ª—Å—è —Ñ–æ—Ä–º–∞—Ç —Å 11/08/2025?
signal_pattern = (
    r"(\w+)\s*"  # symbol
    r".*–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\s*-\s*(\w+).*?"  # direction
    r"–í—Ö–æ–¥ –ø–æ —Ä—ã–Ω–∫—É\s*-\s*([\d.]+).*?"  # entry price
    r"–ù–∞—à–∏ —Ü–µ–ª–∏\s*-\s*([\d., ]+).*?"  # targets
    r"–°—Ç–æ–ø\s*-\s*([\d.]+)"  # stop loss
)


async def get_tg_signal(limit=100):
    signals = []
    if os.path.exists(f"{session_name}.session"):
        logging.info("–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é.")
    else:
        logging.info("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")

    async with TelegramClient(session_name, tg_api_id, tg_api_hash,
                              system_version='1.38.1',
                              device_model='xiaomi',
                              app_version='1.38.1') as client:

        channel = await client.get_entity(tg_channel_name)

        async for message in client.iter_messages(channel, limit=limit):
            message_text = message.text
            message_date = message.date

            match = re.search(signal_pattern, message_text)
            if match:
                symbol = match.group(1)
                buy_price = float(match.group(2))
                take_profits = [float(match.group(i)) for i in range(3, 8)]
                stop_loss = float(match.group(8))

                signal_data = {
                    'symbol': symbol,
                    'buy_price': buy_price,
                    'take_profits': take_profits,
                    'stop_loss': stop_loss,
                    'date': message_date
                }
                signals.append(signal_data)
                # logging.info(f"–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal_data}")

    return signals


async def get_tg_signals_from_insider_trade_by_name(tg_channel_insider: str, limit=100):
    signals = []
    if os.path.exists(f"{session_insider_account}.session"):
        logging.info("–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é.")
    else:
        logging.info("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")

    async with TelegramClient(session_insider_account, tg_api_id, tg_api_hash,
                              system_version='1.38.1',
                              device_model='xiaomi',
                              app_version='1.38.1') as client:

        try:
            channel = await client.get_entity(tg_channel_insider)
        except ChannelPrivateError:
            logging.error(
                "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –æ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ TelegramClient –ø–æ–¥–ø–∏—Å–∞–Ω.")
        except UsernameInvalidError:
            logging.error("Username –∫–∞–Ω–∞–ª–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ ID.")
            dialog = await check_and_get_tg_channel(client, tg_channel_insider)
            if dialog:
                channel = PeerChannel(dialog.id)

            i = 0
            async for message in client.iter_messages(channel, limit=limit):
                message_text = message.text
                message_text = re.sub(r"[^\w\s.,-]", "", message_text)
                message_date = message.date

                if LOGGING:
                    logging.info(f'{i} ({message_date}): {message_text}')
                i += 1

                match = re.search(signal_pattern, message_text, re.DOTALL)
                if match:
                    symbol = match.group(1)
                    direction = match.group(2)
                    buy_price = float(match.group(3))
                    take_profits = [float(x.strip()) for x in match.group(4).split(',')]
                    stop_loss = float(match.group(5))

                    signal_data = {
                        'symbol': symbol,
                        'buy_price': buy_price,
                        'take_profits': take_profits,
                        'stop_loss': stop_loss,
                        'date': message_date
                    }
                    signals.append(signal_data)
                    # logging.info(f"–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal_data}")
    return signals


async def get_tg_signals_from_insider_trade_by_id(tg_channel_insider_id: int, limit=100):
    signals = []
    if os.path.exists(f"{session_insider_account}.session"):
        logging.info("–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é.")
    else:
        logging.info("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")

    async with TelegramClient(session_insider_account, tg_api_id, tg_api_hash,
                              system_version='1.38.1',
                              device_model='xiaomi',
                              app_version='1.38.1') as client:

        channel = PeerChannel(tg_channel_insider_id)

        i = 0
        async for message in client.iter_messages(channel, limit=limit):
            if message.text is not None:
                message_text = re.sub(r"[^\w\s.,-]", "", message.text, flags=re.UNICODE)
                message_date = message.date

            if LOGGING:
                logging.info(f'{i} ({message_date}): {message_text}')
            i += 1

            match = re.search(signal_pattern, message_text, re.DOTALL)
            if match:
                symbol = match.group(1)
                direction = match.group(2).lower()  # –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                buy_price = float(match.group(3))
                take_profits = [float(x.strip()) for x in match.group(4).split(',')]
                stop_loss = float(match.group(5))

                signal_data = {
                    'symbol': symbol,
                    'buy_price': buy_price,
                    'take_profits': take_profits,
                    'stop_loss': stop_loss,
                    'direction': direction,
                    'date': message_date
                }
                signals.append(signal_data)
                # logging.info(f"–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal_data}")
    return signals


async def check_and_get_tg_channel(client: TelegramClient, tg_name_find: str):
    '''
    –ü–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –µ–≥–æ ID
    :param client:
    :param tg_name_find:
    :return:
    '''
    dialogs = await client.get_dialogs()

    channels = [d for d in dialogs if d.is_channel]
    if not channels:
        logging.info("–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.")
        return None

    logging.info("\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
    for i, dialog in enumerate(channels):
        line = f"{i + 1}. {dialog.title} (id: {dialog.id})"
        if tg_name_find.lstrip('@') == dialog.title:  # 'Insider_Trade'
            line = f"üëâ {line} üëà"
            channel_name = dialog.title
            channel_id = dialog.id
            channel = dialog
        logging.info(line)
    return channel


async def send_to_me(message: str):
    if not os.path.exists(f"{session_name}.session"):
        logging.error("–°–µ—Å—Å–∏—è Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return

    async with TelegramClient(session_name, tg_api_id, tg_api_hash) as client:
        await client.send_message('@repon06', message)


async def save_to_me(message: str):
    if not os.path.exists(f"{session_name}.session"):
        logging.error("–°–µ—Å—Å–∏—è Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return

    async with TelegramClient(session_name, tg_api_id, tg_api_hash) as client:
        await client.send_message('me', message)


if __name__ == "__main__":
    asyncio.run(send_to_me("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ üöÄ"))

    # signals = asyncio.run(get_tg_signal(limit=50))
    # logging.info(f"1) –ü–æ–ª—É—á–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤.")

    # signals = asyncio.run(get_tg_signals_from_insider_trade_by_name(tg_channel_insider_name, limit=50))
    # logging.info(f"2) –ü–æ–ª—É—á–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤.")

    signals = asyncio.run(get_tg_signals_from_insider_trade_by_id(tg_channel_insider_id, limit=10))
    logging.info(f"3) –ü–æ–ª—É—á–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤.")
