import asyncio
import logging
import os
import re

from telethon import TelegramClient
from telethon.errors import ChannelPrivateError, UsernameInvalidError
from telethon.tl.types import PeerChannel

from config import session_name, tg_api_id, tg_api_hash, tg_channel_name, session_insider_account, \
    tg_channel_insider_name

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∏–≥–Ω–∞–ª–æ–º
signal_pattern = r"‚ö°.*?New Signal\s#([\w-]+)\s+.*\n\s*`?\s*Buy:\s*`?\s*([\d.]+)\s*\n\s*`?\s*TP1:\s*`?\s*([\d.]+)\s*\n\s*`?\s*TP2:\s*`?\s*([\d.]+)\s*\n\s*`?\s*TP3:\s*`?\s*([\d.]+)\s*\n\s*`?\s*TP4:\s*`?\s*([\d.]+)\s*\n\s*`?\s*TP5:\s*`?\s*([\d.]+)\s*\n\s*`?\s*STL:\s*`?\s*([\d.]+)"


# TODO: –ø–æ–º–µ–Ω—è–ª—Å—è —Ñ–æ—Ä–º–∞—Ç —Å 20/06/2025?

async def get_tg_signal(limit=100):
    signals = []
    if os.path.exists(f"{session_name}.session"):
        logging.info("–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é.")
    else:
        logging.info("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")

    async with TelegramClient(session_name, tg_api_id, tg_api_hash,
                              system_version='1.38.1',
                              device_model='xiaomi',
                              app_version='1.38.1') as client:

        channel = await client.get_entity(tg_channel_name)

        async for message in client.iter_messages(channel, limit=limit):
            message_text = message.text
            message_date = message.date

            match = re.search(signal_pattern, message_text)
            if match:
                symbol = match.group(1)
                buy_price = float(match.group(2))
                take_profits = [float(match.group(i)) for i in range(3, 8)]
                stop_loss = float(match.group(8))

                signal_data = {
                    'symbol': symbol,
                    'buy_price': buy_price,
                    'take_profits': take_profits,
                    'stop_loss': stop_loss,
                    'date': message_date
                }
                signals.append(signal_data)
                # logging.info(f"–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal_data}")

    return signals


async def get_tg_signals_from_insider_trade(limit=100):
    signals = []
    if os.path.exists(f"{session_insider_account}.session"):
        logging.info("–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é.")
    else:
        logging.info("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")

    async with TelegramClient(session_insider_account, tg_api_id, tg_api_hash,
                              system_version='1.38.1',
                              device_model='xiaomi',
                              app_version='1.38.1') as client:

        try:
            channel = await client.get_entity(tg_channel_insider_name)
        except ChannelPrivateError:
            print("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –æ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ TelegramClient –ø–æ–¥–ø–∏—Å–∞–Ω.")
        except UsernameInvalidError:
            print("Username –∫–∞–Ω–∞–ª–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ ID.")
            dialog = await check_and_get_tg_channel(client, tg_channel_insider_name)
            if dialog:
                channel = PeerChannel(dialog.id)

        async for message in client.iter_messages(channel, limit=limit):
            message_text = message.text
            message_date = message.date

            print(f'{message_text}')
    return []


async def check_and_get_tg_channel(client: TelegramClient, tg_name_find: str):
    dialogs = await client.get_dialogs()

    channels = [d for d in dialogs if d.is_channel]
    if not channels:
        print("–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.")
        return None

    print("\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
    for i, dialog in enumerate(channels):
        line = f"{i + 1}. {dialog.title} (id: {dialog.id})"
        if tg_name_find.lstrip('@') == dialog.title:  # 'Insider_Trade'
            line = f"üëâ {line} üëà"
            channel_name = dialog.title
            channel_id = dialog.id
            channel = dialog
        print(line)
    return channel


# –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
if __name__ == "__main__":
    signals = asyncio.run(get_tg_signal(limit=50))
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤.")

    signals = asyncio.run(get_tg_signals_from_insider_trade(limit=50))
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤.")
